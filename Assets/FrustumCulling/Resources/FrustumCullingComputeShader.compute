#pragma kernel CSMain
#define FRUSTUM_PLANE_COUNT 6
#define THREAD_GROUP_X 256
#define THREAD_GROUP_Y 1
#define THREAD_GROUP_Z 1

struct BufferData
{
    float3 center;
    float3 extents;
};

StructuredBuffer<BufferData> boundsBuffer;
RWStructuredBuffer<uint> resultBuffer;
float4 frustumPlanes[FRUSTUM_PLANE_COUNT];
uint _Count;

float FrustumCullingTest(BufferData bufferData)
{
	float3 center = bufferData.center;
    float3 extents = bufferData.extents;
    float3 boundsMin = center - extents;
    float3 boundsMax = center + extents;

	[unroll]
    for(uint i = 0; i < FRUSTUM_PLANE_COUNT; i++)
    {
        float3 normal = frustumPlanes[i].xyz;
        float planeDistance = frustumPlanes[i].w;
        float3 bounds = lerp(boundsMin, boundsMax, step(0, normal));
        
        if(dot(normal, bounds) + planeDistance < 0.5)
        {
            return 0;
        }
    }
    
    return 1;
}

[numthreads(THREAD_GROUP_X, THREAD_GROUP_Y, THREAD_GROUP_Z)]
void CSMain (uint id : SV_DispatchThreadID)
{
	if(id >= _Count)
	{
		return;
	}

    resultBuffer[id] = FrustumCullingTest(boundsBuffer[id]);
}
